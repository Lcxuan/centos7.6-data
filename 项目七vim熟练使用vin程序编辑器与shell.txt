vim是vimsual interface 的简称，可以执行输出、删除、查找、替换、块操作等文本操作

vim的三种工作模式：
	编辑模式
		进入vim之后，首先进入就是编辑模式
	插入模式
		按i、a、o、c、r、s都可以进入插入模式
		i		插入命令
		a		附加命令
		o		打开命令
		c		修改命令
		r		取代命令
		s		替换命令
		在插入模式下，若想获取到编辑模式，按"Esc"即可
	命令模式（末行模式）
		在编辑模式下，按":"即可进入命令模式
		
		
vim filename	不输入文件名也可以进去vim界面

编辑模式下的光标移动
	h或左箭头		光标左移一个字符
	j或下箭头		光标下移一个字符
	k或上箭头		光标上移一个字符
	l或右箭头		光标右移一个字符
	ctrl+f			屏幕向下移动一页
	ctrl+b			屏幕向上移动一页
	ctrl+d			屏幕向下移动半页
	ctrl+u			屏幕向上移动半页
	+				光标移动到非空格符的下一列
	-				光标移动到非空格符的上一列
	n<space>		n表示数字，按下数字后按space，表示光标跳到该行的n个字符
	0				移动到该行首字符
	$				移动到该行末尾字符
	H				光标移动到该屏幕的首字符
	M				光标移动到该屏幕中间那行的首字符
	L				光标移动到该屏幕最下方一行的首字符
	G				光标移动到这个文件的最后一行
	nG				n表示数字，按下数字后按G，表示跳到该文件的n行
	gg				移动到该文件的首行
	n<Enter>		n表示数字，按下数字后按Enter，表示光标向下移动n行
	
编辑模式下的查找与替换
	/string					在光标下查找string的字符串
	?string					在光标上查找string的字符串
	n						重复上一个查找的动作
	N						反向进行前一个查找动作，例如：按下/string后，光标会向上查找string的字符串
	:n1,n2 s/str1/str2/g	n1和n2为数字，在n1~n2之间查找str1的字符串，找到后将str1的字符串替换为str2
	:1,$ s/str1/str2/g		从第一行到最后一行之间查找str1的字符串，找到后将str1的字符串替换为str2
	:1,$ s/str1/str2/gc		从第一行到最后一行之间查找str1的字符串，替换前，提示用户去确认
	
编辑模式下的删除、复制和粘贴
	x				在一行中，向后删除一个字符
	X				在一行中，向前删除一个字符
	nx				n为数字，按下数字后按x，表示向后删除n个字符
	dd				删除光标所在的整行
	ndd				n为数字，按下数字后按dd，表示删除光标向下n列
	d1G				删除光标所在行到第一行的所有数据
	dG				删除光标所在行到最后一行的所有数据
	d$				删除光标所在处，到该行的最后一个字符
	d0				删除光标所在行的前一个字符到该行的首个字符之间所有字符
	yy				复制光标所在的那一行
	nyy				n为数字，按下数字后按yy，表示复制光标所在的向下n列
	y1G				复制光标所在列到第1行的所有数据
	yG				复制光标所在列到最后一列的所有数据
	y0				复制光标所在的那个字符到该行行首的所有数据
	y$				复制光标所在的那个字符到该行行尾的所有数据
	p				将复制的数据在光标下一行粘贴
	P				将复制的数据在光标上一行粘贴
	J				将光标所在列与下一列的数据结合成同一列
	c				重复删除多个数据
	u				复原前一个动作
	ctrl+r			重复上一个动作
	.				重复前一个动作
	
进入插入模式
	i				从光标所在位置前开始插入文本
	l				将光标移到当前行的行首，然后插入文本
	a				在光标当前所在位置之后追加新文本
	A				将光标移到所在行的行尾，从那里开始插入新文本
	o				在光标所在行的下面新开一行，将光标置于该行行首，等待输入
	O				在光标所在行的上面插入一行，将光标置于该行行首，等待输入
	Esc				退出编辑模式或回到编辑模式
	
命令模式的按键说明
	:w					保存
	:w!					若文件属性为只读时，强制写入该文件
	:q					直接退出
	:q!					强制退出不保存文件
	:wq!				保存退出
	ZZ					如果文件没有更改则不保存退出，如果更改过，则保存退出
	:w filename			另存为filename
	:wq! filename		以filename为文件名保存退出
	:x					保存并退出
	:r filename			在编辑的数据中，读取另一个文件，即将filename的数据在光标所在行后面插入
	:n1,n2 w filename	将n1到n2的内容储存为filename文件
	:! command			暂时退出vim到命令行模式执行command
	:set nu				显示行号
	:set nonu			取消行号
	
shell就是用户与操作系统内核之间的接口，有着协调用户与系统的一致性和在用户与系统之间进行交互的作用
默认的shell为bash

变量定义：
	name=string
	name为变量名，string为值，"="为赋值的符号
通过在变量名前加"$"符号可以引用变量的值
在定义变量时，在string中包含空格、制表符和换行符，则需要单引号或双引号括起来
	双引号允许变量替换
	单引号不允许

shell变量分为局部变量和全部变量
	局部变量：作用范围仅限制在其命令行所在的shell或shell脚本文件中
	全部变量：作用范围则包括本shell进程及其所有子进程

使用export内置命令可以将局部变量设置为全部变量
export var 		将var变量设置为全局变量

环境变量是指由shell定义和赋初值的shell变量，shell用环境变量来确定查找路径、注册目录、终端类型、终端名称、用户名等
所有环境变量都是全局变量，可以由用户重新设置
set 环境变量=变量的值

shell中的环境变量
环境变量名				说明
EDITOR、FCEDIT			bash fc命令的默认编辑器
HISTFILE				用于存储历史命令的文件
HISTSIZE				历史命令列表的大小
HOME					当前用户的用户目录
OLDPWD					前一个工作目录
PATH					Bash寻找可执行文件的搜索路径
PS1						命令行的一级提示符
PS2						命令行的二级提示符
PWD						当前工作目录
SECONDS					当前shell开始后所流逝的秒数


命令运行的判断依据：;、&&、||
	;	可以一次运行多个命令
	&&	
		com1 && com2	若com1运行成功，则开始运行com2
		com1 && com2	若com1运行失败，则不运行com2
	||
		com1 || com2	若com1运行成功，则不运行com2
		com1 || com2	若com1运行失败，则开始运行com2
		
系统中的用户环境设置文件
	登录环境设置文件：/etc/profile
	非登录环境设置文件：/etc/bashrc
用户设置的环境设置文件
	登录环境设置文件：$HOME/.Bash_profile
	非登录环境设置文件：$HOME/.bashrc
	
正则表达式：
	grep高级使用：
		grep [-A][-B] [--color=auto] '查找字符串' filename
		参数：
			-A		后面可加数字，为after的意思，除了列出该行外，后面的n行也列出来
			-B		后面可加数字，为befor的意思，除了列出该行外，前面的n行也列出来
			--color=auto	可将搜寻出的做正确数据用特殊颜色标记
			-n		显示行号
	
	基础正则表达式：
		查找的字符串可以使用"[]"来搜寻集合字符
			grep -n 't[a-z]st' filename		搜寻t开头，中间为a-z，结尾st的字符
		不想有某个字符的行显示，可以使用使用"[^]"
			grep -n '[^t]est' filename			将不是t开头的est显示出来
			grep -n '[^a-z]est' filename		将不是a-z开头的est显示出来
			grep -n '[^a-zA-Z0-9]est' filename	将没有开头的est查找出来
			grep -n	'[^[:lower:]]est' filename	将不是est开头不是小写的显示
					'[^[:upper:]]est'			不是est开头不是大写的显示
					'[^[:digit:]]est'			不是est开头不是数字的显示
		
		^在"[]"和在"[]"外的意思是不同的
			在"[]"表示反向选择
			在"[]"外表示定位在行首
		$：在末尾查找指定的字符串
		\：转义符号
		
		任意字符"."与重复字节"*"
		"."：代表一个任意字符
		"*"：代表重复前一个字符0次到无穷多次的意思
		grep -n 't.est' filename				表示查找t开头，第二个任意字符，结尾est的字符
		grep -n 't*est' filename				表示查找t开头，*号可以没有，也可以是t的无数次，结尾est
		
		给定字符范围:{}
		grep -n 't\{2,5\}est' filename			表示查找t开头，后面需要2~5个字符,结尾est
		
重定向
	重定向符号					说明
	<							实现输入重定向
	>或>>						实现输出重定向
								>会清空指定文件中数据
								>>会以追加方式插入到数据中
	2>或2>>						实现错误重定向
	&>							同时实现输出重定向和错误重定向
	